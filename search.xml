<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安卓笔记（2022-12-12）</title>
      <link href="/2022/12/12/%E5%AE%89%E5%8D%93%E7%AC%94%E8%AE%B0%EF%BC%882022-12-12%EF%BC%89/"/>
      <url>/2022/12/12/%E5%AE%89%E5%8D%93%E7%AC%94%E8%AE%B0%EF%BC%882022-12-12%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<style>p{  font-size: 18px;  text-indent:36px;  margin: 20px auto;}    red{        color: red;    }img {    margin: 1.5% auto;    border: solid 1px rgba(17,0,255,0.46);    box-shadow: 0 0.4rem 1.2rem rgba(0, 0, 0, 0.25), 0 0.2rem 0.2rem rgba(0, 0, 0, 0.22);}.note {    background-image: radial-gradient(closest-side, rgba(255,213,150,0.2), rgba(200,248,105,0.05)), radial-gradient(closest-side, rgba(88,251,118,0.22), rgba(63,249,212,0.03)), radial-gradient(closest-side, rgb(64, 145, 14), rgba(254, 234, 131, 0)), radial-gradient(closest-side, rgb(234, 135, 7), rgba(170, 142, 245, 0));    background-size: 130vw 130vh, 120vw 120vh, 100vw 150vh, 120vw 130vh;    background-position: -80vw -80vh, 30vw -20vh, -20vw 20vh, 30vw 20vh;    background-repeat: no-repeat;    border-radius: 0.7rem;    box-shadow: 0 0.9rem 1.7rem rgba(0, 0, 0, 0.25), 0 0.7rem 0.7rem rgba(0, 0, 0, 0.22);    height: auto;    min-height: 300px;    padding: 20px;    overflow: hidden;    position: relative;    max-width: 95%;    width: 100%;    margin: 4% auto;}h1 {    text-align: center;}.title {    font-weight: bold;    margin: 0;    margin-bottom: 1.25rem;}a {    text-decoration: none;    color: black;}#mytable {    max-width: 35%;    width: 70%;    padding: 0;    margin: 0 auto;    table-layout: fixed;}caption {    padding: 0 0 5px 0;    width: 400px;    font: italic 11px "Trebuchet MS", Verdana, Arial, Helvetica, sans-serif;    text-align: right;}th {    font: bold 11px "Trebuchet MS", Verdana, Arial, Helvetica, sans-serif;    color: #4f6b72;    border-right: 1px solid #C1DAD7;    border-bottom: 1px solid #C1DAD7;    border-top: 1px solid #C1DAD7;    letter-spacing: 2px;    text-transform: uppercase;    text-align: left;    padding: 6px 6px 6px 12px;    background: #CAE8EA no-repeat;}th.nobg {    border-top: 0;    border-left: 0;    border-right: 1px solid #C1DAD7;    background: none;}td {    border-right: 1px solid #C1DAD7;    border-bottom: 1px solid #C1DAD7;    background: #fff;    font-size: 18px;    padding: 6px 6px 6px 12px;    color: #4f6b72;}td.alt {    background: #F5FAFA;    color: #797268;}th.spec {    border-left: 1px solid #C1DAD7;    border-top: 0;    background: #fff no-repeat;    font: bold 10px "Trebuchet MS", Verdana, Arial, Helvetica, sans-serif;}th.specalt {    border-left: 1px solid #C1DAD7;    border-top: 0;    background: #f5fafa no-repeat;    font: bold 10px "Trebuchet MS", Verdana, Arial, Helvetica, sans-serif;    color: #797268;}html>body td {    font-size: 18px;}td, th {    font-family: 宋体, Arial;    font-size: 20px;}</style><div class="note">  <h1 class="title">安卓笔记(2022-12-12)视图滑动切换工具</h1>  <h2 class="title"><a href="#words">1.单词积累</a></h2>  <h2 class="title"><a href="#sampleUse">2.Viewpager的简单使用</a></h2>  <h2 class="title"><a href="#PageChangeListener">3.设置Viewpager的滑屏监听</a></h2></div>    <div class="note" id="words">  <h1 class="title">1.单词积累</h1>  <table id="mytable" cellspacing="0">    <caption>    </caption>    <tr>      <th scope="col" style="text-align: center">单词</th>      <th scope="col" style="text-align: center">含义</th>    </tr>    <tr>      <td class="row">oval</td>      <td class="row">椭圆形</td>    </tr>    <tr>      <td class="row">line</td>      <td class="row">线条</td>    </tr>    <tr>      <td class="row">rectangle</td>      <td class="row">矩形</td>    </tr>    <tr>      <td class="row">ring</td>      <td class="row">环形</td>    </tr>  </table></div><div class="note" id="sampleUse">      <h1 class="title">ViewPager的简单使用</h1>          <p>ViewPager(视图滑动切换工具)通过手势滑动可以完成View的切换，一般是用来做APP的引导页或者实现图片轮播。</p>          <p>ViewPager就是一个简单的页面切换组件，我们可以往里面<red>填充</red>多个View，然后我们可以左右滑动，从而切换不同的View，我们可以通过<red>setPageTransformer()方法</red>为我们的ViewPager 设置切换时的动画效果。和ListView，GridView一样，我们也需要一个Adapter (适配器)将我们的View和ViewPager进行绑定，而ViewPager则有一个特定的Adapter—— <red>PagerAdapter</red>。</p>          <h2 class="title">1.获得控件</h2>          <p>首先在主页中准备<red>androidx.viewpager.widget.ViewPager</red>控件；[控件名id：viewPager]。</p>          <img src="/picture/Android_work/2022/12/12/no1.png"/>          <p>然后准备好填充到ViewPager的轮播界面的布局。[布局文件:vpitem.xml]。</p>          <img src="/picture/Android_work/2022/12/12/no2.png"/>          <h2 class="title">2.初始化数据并添加适配器</h2>            <p>使用R文件将存放在drawable文件夹的轮播图片地址值封装在一个数组中。作为参数传入适配器，并传入当前的活动页面。</p>            <img src="/picture/Android_work/2022/12/12/no3.png"/>            <p>创建ViewPager特定的适配器PagerAdapter，这里命名为MyVpAdapter。生成其构造方法接收参数，并重写①<red>getCount</red>()、② <red>instantiateItem</red>( ViewGroup container, int position)、③ <red>destroyItem</red>( ViewGroup container, int position,  Object object)、④<red>isViewFromObject</red>( View view,  Object object)四个方法</p>          <img src="/picture/Android_work/2022/12/12/no9.png"/>           <h3 class="title">（1）生成构造方法</h3>           <p>接收两个参数，一个是存放图片地址的<red>数组</red>，另一个代表着当前活动页面的<red>视图</red>。将形参（局部变量）传入当前类中作为程序响应的实参。</p>           <img src="/picture/Android_work/2022/12/12/no4.png" />           <h3 class="title">（2）重写getCount()</h3>           <p>与之前学习的滚动控件中的getCount()方法类似，用于返回可供展示的条数，一般为数据源数组的长度。[使用Ctrl+o可以实现快速重写方法]</p>           <img src="/picture/Android_work/2022/12/12/no5.png"/>           <h3 class="title">（3）重写instantiateItem(ViewGroup container, int position)</h3>             <p>instantiateItem()方法有着两个形参，返回值类型为Object，意味着可以返回任何数据，不过一般返回一个View对象。             <p>两个形参ViewGroup container和int position，前者用于存放View对象，后者用于标记当前进行初始化的序号。当轮播到某一张时，都会调用该方法填充轮播内容，或者为下一张轮播图进行预加载。</p>               <img src="/picture/Android_work/2022/12/12/no6.png"/>               <p>第一行代码调用了View的inflate()方法，与之前LayoutInflater 的 inflate() 方法作用类似，可以动态的加载一个布局文件，第一个参数为传入的上下文，第二个参数为我们轮播图的布局文件地址，可以暂时理解此适配器会将该布局文件[vpitem.xml]载入到我们的主页的ViewPager中。</p>               <p>下面的代码主要作用就是对于布局文件中内容的填充了，不再详述，最后要将配置好的view对象放入ViewGroup中，并返回一个view对象，这样做的意义涉及到了后面要详述的方法，咱们一个一个来。</p>            <h3 class="title">（4）重写destroyItem( ViewGroup container, int position,  Object object) </h3>            <p>咱们之前存入到ViewGroup的View对象都会在这里销毁，当我们手动或者自动的去翻向下一张轮播图时，那么上一张轮播图的内存都会在这个方法释放。</p>            <img src="/picture/Android_work/2022/12/12/no7.png"/>            <h3 class="title">（5）重写isViewFromObject( View view,  Object object)</h3>            <p>当我们执行完instantiateItem()方法后，它的返回值类型是Object，也就是指所有类，该方法是用来判断返回值是否是一个view对象，并使用boolean类型的数据来表示结果。</p>            <img src="/picture/Android_work/2022/12/12/no8.png"/>            <h2 class="title">3.添加适配器</h2>            <img src="/picture/Android_work/2022/12/12/no10.png"/>            <p>这样，我们最基础的视图滑动切换工具就配置完成了。</p></div><div class="note" id="PageChangeListener">  <h1 class="title">3.设置Viewpager的滑屏监听</h1><p>在该实例中，我们使用三个“点”的状态来响应Viewpager发生了轮播图更换，首先就是构建用来表示“轮播中”和“未轮播”“点”的两种状态，然后再设置Viewpager的滑屏监听。</p>    <h2 class="title">构建“点”的样式</h2>    <p>在AndroidStudio这款软件中，也有着类似于HTML创建简单样式美化视图的功能。你可以在drawable文件中创建简单的样式来表示“点”在不同状态下的样式。右键drawable文件，选择Drawable Resource File。</p>    <img src="/picture/Android_work/2022/12/12/no11.png"/>    <p>你可以看到如下界面，第一行是指文件被引用时的名字，例如你起的名字是”XXXX“，那么引用时就是@drawable/XXXX。</p>    <p>第二行是你要生成的样式表类型，一般有selector和shape，前者比后者多了“按钮没被按下”和“按钮被按下”的两种判定，多用于Button按钮，后者只是完成了一种静态的样式，通过代码响应也可以完成对于不同环境和状态的响应，进行样式的改变。</p>    <img src="/picture/Android_work/2022/12/12/no12.png"/>    <p>接下来就是书写样式[dot.xml]，首先是android:shape的取值，可取oval(椭圆形)、line(线条)、rectangle(矩形)、ring(环形)。直接决定了你最后会以一个什么样式收场</p>    <img src="/picture/Android_work/2022/12/12/no13.png">    <p>除了shape属性，它还有着其它有趣的功能,这边列举了一些常用的属性参考；</p>    <img src="/picture/Android_work/2022/12/12/no14.png"/>    <p>准备好未响应状态下的样式[dot_out.xml]</p>    <img src="/picture/Android_work/2022/12/12/no15.png"/>    <h2 class="title">引用样式文件</h2>    <p>当一张轮播图处于界面中时，其它的轮播图显然是未载入的。三个点的工作逻辑也就可以由此确定。布局如下所示：</p>    <img src="/picture/Android_work/2022/12/12/no16.png">    <p>声明到实例中，状态响应“点“就完成了</p>    <img src="/picture/Android_work/2022/12/12/no17.png">    <h2 class="title">设置Viewpager监听器</h2>    <img src="/picture/Android_work/2022/12/12/no18.png">    <h3 class="title">public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) </h3>    <p>当页面在滑动的时候会调用此方法，在滑动被停止之前，此方法会一直得到调用。position表示目标,positionOffset表示偏移的百分比,positionOffsetPixels表示偏移的像素</p>    <h3 class="title">public void onPageSelected(int position) </h3>    <p>此方法是页面跳转完后得到调用，position是页面跳转完后得到的页面的Position（位置编号）</p>    <h3 class="title">public void onPageScrollStateChanged(int state) </h3>    <p>state 表示当前滑动的状态，只有三个状态0， 1， 2;state ==1:表示正在滑动 ，state==2：表示滑动完毕，state==0：表示什么都没做，就是停在那 ，当页面开始滑动的时候，三种状态的变化顺序为（1，2，0）</p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓笔记（2022-11-28）</title>
      <link href="/2022/11/28/%E5%AE%89%E5%8D%93%E7%AC%94%E8%AE%B0%EF%BC%882022-11-28%EF%BC%89/"/>
      <url>/2022/11/28/%E5%AE%89%E5%8D%93%E7%AC%94%E8%AE%B0%EF%BC%882022-11-28%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>（本网站正在学习搭建，当前页面仅供学习，如果内容有误可联系QQ）</p><font  color="black"><strong>内容概述:</strong></font><br/><font color="black"><strong>1.ListView的点击事件</strong></font><br /><font color="black"><strong>2.RecyclerView的基本用法</strong></font><br /><h1>ListView的点击事件</h1><font color="black"><strong>步骤:</strong></font><br /><font color="black"><strong>1.使用setOnClickListener()方法为ListView注册一个监听器。</strong></font><br /><img src="/picture/Android_work/2022/11/28/no1.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><font color="black"><strong>2.重写监听器的onItemClick()方法，当用户点击任何一个ListView的子类都会回调onItemClic()方法。</strong></font><br/><img src="/picture/Android_work/2022/11/28/no2.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>在这个方法中，安卓系统可以通过position参数判断出用户点击的是哪一个子项，获取到相应的水果，并通过Toast将水果的名字显示出来</p><img src="/picture/Android_work/2022/11/28/no3.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><h1>RecyclerView的基本用法</h1><p><font color="black"><strong>步骤:</strong></font><br /><br><font color="black"><strong>1.新建一个项目命名为RecylerViewDemo</strong></font><br/><br><img src="/picture/Android_work/2022/11/28/no4.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"></p><p><font color="black"><strong>2.创建RecyclerView布局（子项的最外层布局）和子项item布局</strong></font><br/></p><p>(1)RecyclerView布局（子项的最外层布局）<br/>这边的RecyclerView控件的id赋值为recycle，方便后续工作。<br/>Android开发中有一个类似Java中的checkstyle的工具（这个是一个检查代码编程规范、排除潜在问题的一个工具），叫android-Lint，但这东西检查出来的有时候不一定是错误，而可能是我们不符合lint中定义的编码规范（这个规范是可以自己定制的，所以就需要忽略一些错误的警告等(当我们可以确认时) 所以 <a href="https://blog.csdn.net/weixin_30640291/article/details/96662397?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166962072716800182173251%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=166962072716800182173251&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-96662397-null-null.142^v66^control,201^v3^control_1,213^v2^t3_control1&utm_term=%20tools%3Aignore&spm=1018.2226.3001.4187">tools:igore</a>的作用就是忽略一些指定错误，或者 抑制警告。</p><img src="/picture/Android_work/2022/11/28/no5.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>(2)子项item布局<br/>这边直接使用ListView的子项布局了。</p><img src="/picture/Android_work/2022/11/28/no6.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>主要是三个控件，一张水果照片，两个水果介绍文本。</p><img src="/picture/Android_work/2022/11/28/no7.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><img src="/picture/Android_work/2022/11/28/no8.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p><font color="black"><strong>3.创建数据集合</strong></font><br/></p><p>Fruit类封装一种水果的所有信息。</p><img src="/picture/Android_work/2022/11/28/no11.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>这边的代码虽然较长，但理解比较简单，使用List泛型封装“Fruit”，每一个Fruit类都存放着一种水果的所有信息及相应的提取方式。</p><img src="/picture/Android_work/2022/11/28/no9.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><img src="/picture/Android_work/2022/11/28/no10.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p><font color="black"><strong>4.创建适配器</strong></font><br/></p><p>(1)创建一个FruitAdapter类,继承RecyclerView.Adapter并重写父类中的抽象方法,其泛型要指定为其携带的Holder类。</p><img src="/picture/Android_work/2022/11/28/no12.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>(2)生成FruitAdapter类的构造方法，用于接收项目的数据源和上下文。</p><img src="/picture/Android_work/2022/11/28/no13.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>(3)声明FruitHolder内部参数<br/>与ListView的不同之处<p class="rad">ListView是根据每一份数据源，单独声明视图、布局、控件，而RecyclerView用内部类将子项的布局信息封装起来，减少加载容量。</p></p><img src="/picture/Android_work/2022/11/28/no14.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>(4)重写适配器的onCreateViewHolder()方法<br/>onCreateViewHolder()是创建ViewHolder时的回调函数，向里面传入 ViewGroup parent 和 int viewType其返回值为你定义的泛型Holder。<br/>红框里面的代码可以简写为下面那一句，这样最后就new出了一个以R.layout.item为模具的内容框架了，现在我们需要将它装填内容并放在父布局RecycleView中。</p><img src="/picture/Android_work/2022/11/28/no15.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>(5)重写适配器的onBindViewHolder()方法<br/>onBindViewHolder()是绑定ViewHolder“return”时的回调函数，传入 自定义内部类的 holder 和 int position。<br/>position是list中的水果序号，方便我们调取数组中的Fruit类,然后再根据自定义的holder”模具“填充每一行的内容。</p><img src="/picture/Android_work/2022/11/28/no16.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>(6)最后是getItemCount()<br/>它的返回值是一个int，这个方法是控制创建item的条数，返回的就是条数。</p><img src="/picture/Android_work/2022/11/28/no17.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p><font color="black"><strong>5.最后绑定适配器，并设置RecyclerView部分参数。</strong></font><br/></p><p>使用setAdapter()绑定适配器，并设置recyclerView的LinearLayoutManager参数，recyclerView的部分参数出现缺省，内容将将不予加载。</p><img src="/picture/Android_work/2022/11/28/no18.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p><font color="black"><strong>6.最后运行即可。</strong></font><br/><br><img src="/picture/Android_work/2022/11/28/no19.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"></p><style>    p{        font-size: 18px;    }    font{            font-size: 24px;    }    .rad{        color: red;    }</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2022/11/26/2022-11-25-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2022/11/26/2022-11-25-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2><img src="/picture/naxida.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"> <form action="/2022/11/26/2022-11-25-第二篇文章/">       <table align="center" width="300" border="1" height="150">         <tr>           <td colspan="2" align="center"><b>登录页面</b></td>         </tr>          <tr>            <td align="center">账户：<input type="text" name="username"></input></td>          </tr>         <tr>           <td align="center">密码：<input type="text" name="password"></input></td>         </tr>         <tr>           <td colspan="2" align="center"><input type="submit"/></td>         </tr>       </table> </form><script>console.log(document.documentElement);var p =document.getElementsByTagName("div");for (var n = 0;n<p.length;n++){var h = p[n];for (var i=0;i<h.attributes.length;i++){    console.log((n+1)+h.attributes[i]);}}</script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第二篇文章</title>
      <link href="/2022/11/26/2022-11-25-%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2022/11/26/2022-11-25-%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第二篇文章"><a href="#这是我的第二篇文章" class="headerlink" title="这是我的第二篇文章"></a>这是我的第二篇文章</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安卓笔记（2022-11-28）</title>
      <link href="/2022/11/28/%E5%AE%89%E5%8D%93%E7%AC%94%E8%AE%B0%EF%BC%882022-11-28%EF%BC%89/"/>
      <url>/2022/11/28/%E5%AE%89%E5%8D%93%E7%AC%94%E8%AE%B0%EF%BC%882022-11-28%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<style>    p{        font-size: 18px;    }    font{            font-size: 24px;    }    .rad{        color: red;    }</style><p>（本网站正在学习搭建，当前页面仅供学习，如果内容有误可联系QQ）</p><font  color="black"><strong>内容概述:</strong></font><br/><font color="black"><strong>1.ListView的点击事件</strong></font><br /><font color="black"><strong>2.RecyclerView的基本用法</strong></font><br /><h1>ListView的点击事件</h1><font color="black"><strong>步骤:</strong></font><br /><font color="black"><strong>1.使用setOnClickListener()方法为ListView注册一个监听器。</strong></font><br /><img src="/picture/Android_work/2022/11/28/no1.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><font color="black"><strong>2.重写监听器的onItemClick()方法，当用户点击任何一个ListView的子类都会回调onItemClic()方法。</strong></font><br/><img src="/picture/Android_work/2022/11/28/no2.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>在这个方法中，安卓系统可以通过position参数判断出用户点击的是哪一个子项，获取到相应的水果，并通过Toast将水果的名字显示出来</p><img src="/picture/Android_work/2022/11/28/no3.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><h1>RecyclerView的基本用法</h1><p><font color="black"><strong>步骤:</strong></font><br /><br><font color="black"><strong>1.新建一个项目命名为RecylerViewDemo</strong></font><br/><br><img src="/picture/Android_work/2022/11/28/no4.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"></p><p><font color="black"><strong>2.创建RecyclerView布局（子项的最外层布局）和子项item布局</strong></font><br/></p><p>(1)RecyclerView布局（子项的最外层布局）<br/>这边的RecyclerView控件的id赋值为recycle，方便后续工作。<br/>Android开发中有一个类似Java中的checkstyle的工具（这个是一个检查代码编程规范、排除潜在问题的一个工具），叫android-Lint，但这东西检查出来的有时候不一定是错误，而可能是我们不符合lint中定义的编码规范（这个规范是可以自己定制的，所以就需要忽略一些错误的警告等(当我们可以确认时) 所以 <a href="https://blog.csdn.net/weixin_30640291/article/details/96662397?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166962072716800182173251%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=166962072716800182173251&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-96662397-null-null.142^v66^control,201^v3^control_1,213^v2^t3_control1&utm_term=%20tools%3Aignore&spm=1018.2226.3001.4187">tools:igore</a>的作用就是忽略一些指定错误，或者 抑制警告。</p><img src="/picture/Android_work/2022/11/28/no5.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>(2)子项item布局<br/>这边直接使用ListView的子项布局了。</p><img src="/picture/Android_work/2022/11/28/no6.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>主要是三个控件，一张水果照片，两个水果介绍文本。</p><img src="/picture/Android_work/2022/11/28/no7.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><img src="/picture/Android_work/2022/11/28/no8.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p><font color="black"><strong>3.创建数据集合</strong></font><br/></p><p>Fruit类封装一种水果的所有信息。</p><img src="/picture/Android_work/2022/11/28/no11.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>这边的代码虽然较长，但理解比较简单，使用List泛型封装“Fruit”，每一个Fruit类都存放着一种水果的所有信息及相应的提取方式。</p><img src="/picture/Android_work/2022/11/28/no9.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><img src="/picture/Android_work/2022/11/28/no10.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p><font color="black"><strong>4.创建适配器</strong></font><br/></p><p>(1)创建一个FruitAdapter类,继承RecyclerView.Adapter并重写父类中的抽象方法,其泛型要指定为其携带的Holder类。</p><img src="/picture/Android_work/2022/11/28/no12.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>(2)生成FruitAdapter类的构造方法，用于接收项目的数据源和上下文。</p><img src="/picture/Android_work/2022/11/28/no13.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>(3)声明FruitHolder内部参数<br/>与ListView的不同之处<p class="rad">ListView是根据每一份数据源，单独声明视图、布局、控件，而RecyclerView用内部类将子项的布局信息封装起来，减少加载容量。</p></p><img src="/picture/Android_work/2022/11/28/no14.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>(4)重写适配器的onCreateViewHolder()方法<br/>onCreateViewHolder()是创建ViewHolder时的回调函数，向里面传入 ViewGroup parent 和 int viewType其返回值为你定义的泛型Holder。<br/>红框里面的代码可以简写为下面那一句，这样最后就new出了一个以R.layout.item为模具的内容框架了，现在我们需要将它装填内容并放在父布局RecycleView中。</p><img src="/picture/Android_work/2022/11/28/no15.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>(5)重写适配器的onBindViewHolder()方法<br/>onBindViewHolder()是绑定ViewHolder“return”时的回调函数，传入 自定义内部类的 holder 和 int position。<br/>position是list中的水果序号，方便我们调取数组中的Fruit类,然后再根据自定义的holder”模具“填充每一行的内容。</p><img src="/picture/Android_work/2022/11/28/no16.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p>(6)最后是getItemCount()<br/>它的返回值是一个int，这个方法是控制创建item的条数，返回的就是条数。</p><img src="/picture/Android_work/2022/11/28/no17.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p><font color="black"><strong>5.最后绑定适配器，并设置RecyclerView部分参数。</strong></font><br/></p><p>使用setAdapter()绑定适配器，并设置recyclerView的LinearLayoutManager参数，recyclerView的部分参数出现缺省，内容将将不予加载。</p><img src="/picture/Android_work/2022/11/28/no18.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"><p><font color="black"><strong>最后运行即可。</strong></font><br/><br><img src="/picture/Android_work/2022/11/28/no19.png" style="margin: 0px auto;border: solid 1px rgba(0, 162, 255, 0.46);"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2022/11/26/2022-11-25-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2022/11/26/2022-11-25-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
